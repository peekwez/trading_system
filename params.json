{"name":"Trading System","tagline":"Python Scripts for Developing an Equity Trading System","body":"# Kapp Consulting - Trading System [![Build Status](https://travis-ci.com/peekwez/trading_system.svg?token=BnDQr5dc9iRq4pSqsjvc&branch=master)](https://travis-ci.com/peekwez/trading_system)\r\n---\r\n## **System Dependencies (Ubuntu 14.04)**\r\nInstall the following system dependencies\r\n\r\n* [pip](https://pip.pypa.io/en/stable/installing/)\r\n* [virtualenv](https://virtualenv.readthedocs.org/en/latest/installation.html)\r\n* [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/install.html)\r\n* [Node.js](https://nodejs.org/en/)\r\n* [docker](https://docs.docker.com/engine/installation/)\r\n* [docker-compose](https://docs.docker.com/compose/install/)\r\n\r\n## **Installation**\r\n\r\n### Clone Repository.\r\n```\r\n$ git clone git@github.com:<peekwez>/trading_system.git\r\n$ cd trading_system\r\n```\r\n\r\n### Install Application Dependencies\r\ncopy and paste the lines below to install the following dependencies\r\n```\r\n$ sudo apt-get install -y build-essential gfortran gcc libatlas-base-dev  curl git python-dev libpq-dev libssl-dev postgresql-client libxml2-dev libxsltl-dev libgraphviz-dev libopenblas-dev liblapack-dev\r\n$ sudo apt-get build-dep python-matplotlib\r\n$ pip install -r requirements.txt\r\n$ npm install -g redis-commander\r\n```\r\n\r\n## **Setup Instructions**\r\n\r\n### Initial Setup\r\n```\r\n$ make setup\r\n```\r\n\r\nThe above command performs the following tasks\r\n\r\n* starts `postgres:9.4.1` and `redis:2.8` services using `docker-compose`. The `postgres` container's port `5432/tcp` is linked to port `5431` on the local machine while the `redis` container's port `6379/tcp` is linked to port `6378` on the local machine\r\n\r\n* creates a database called `securities_master` and a Django admin superuser for the application. The superuser is created through a shell prompt\r\n\r\n* creates log files in `trading_system/db/logs/` for all the supervisor processes\r\n\r\n### Supervisor Processes\r\n```\r\n$ make processes\r\n$ make status  # (Check if processes are up and running)\r\n```\r\n\r\nThe following process are started in the background by supervisor\r\n* `celery worker`\r\n* `celery beat`\r\n* `django development server`  - the `admin` page is at [http://localhost:8000/admin](http://localhost:8000/admin)\r\n* `celery flower` at [http://localhost:8001](http://localhost:8001)\r\n* `ipython notebook` at [http://localhost:8002](http://localhost:8002) with a `Django Shell-Plus` kernel\r\n* `redis-commander` at [http://localhost:8003](http://localhost:8003)\r\n\r\n\r\n### Populating Database\r\n* log in to the [Admin Page](http://localhost:8000/admin) and add the following information for **Yahoo** to the **Data Vendor table**\r\n  ```\r\n  Name = Yahoo Finance\r\n  Historical url = http://ichart.finance.yahoo.com/table.csv\r\n  Quotes url = http://download.finance.yahoo.com/d/quotes.csv\r\n  Support email = support@yahoo.com\r\n  ```\r\n\r\n* execute the _celery_ tasks inside an [`ipython notebook`](http://localhost:8002) cell using the `Django Shell-Plus` kernel\r\n  ```python\r\n  create_exchanges.delay() # adds TSX, TSXV, NASDAQ and NYSE exchanges to database\r\n  update_securities_symbols.delay() # adds S&P500 and S&P/TSX tickers to database\r\n  add_historical_prices.delay() # adds daily prices from Jan 01, 10 years ago to today\r\n  ```\r\n\r\n### Updating Tickers Manually\r\n* add the ticker(s) information to the **Symbols table** using the [Admin Page](http://localhost:8000/admin)\r\n\r\n* update the historical prices for the added tickers by executing the following commands inside a cell in the [`ipython notebook`](http://localhost:8002) using the `Django Shell-Plus` kernel\r\n  ```python\r\n  add_prices_for_tickers.delay(tickers=['tk1','tk2','...'])\r\n  ```\r\n\r\n### Daily Prices\r\n* `update_prices` _celery_ task is executed every 10 minutes between 9am-6pm during the weekdays using `celery-beat` as the scheduler and the `celery-worker` as the task queue. _Redis_ is used as the _celery_ broker.\r\n\r\n## **After System Restart/Reboot**\r\n`cd` into application directory and execute the following commands\r\n```\r\n$ make docker-services\r\n$ make processes\r\n```\r\n\r\n## **Miscellaneous**\r\n### Sample Python Script\r\nThis script can be run in [`ipython notebook`](http://localhost:8002) to generate a\r\nsimple and/or exponential moving average for all tickers whose value is less\r\nor equal to **$2.5** on the specified date\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\n\r\nfrom __future__ import absolute_import\r\nfrom datetime import date, timedelta\r\n\r\n\r\n# turn matplotlib inline and save figs as pdfs or svg\r\nget_ipython().magic(u'matplotlib inline')\r\nget_ipython().magic(u\"config InlineBackend.figure_format = 'svg'\")\r\n\r\n# fetch daily prices for tickers\r\ntoday = '2016-01-29' # date.today()\r\ntickers = DailyPrice.objects.filter(close_price__lte=2.5, price_date=today).values_list('symbol__ticker', flat=True)\r\n\r\n\r\n# set start and end dates\r\nstart_date = '2015-01-01'\r\nend_date = today\r\n\r\n# initialized plot class\r\np = plot.PlotSymbol(tickers)\r\n\r\n# plot a simple moving average using pandas\r\nma_type = 'simple' # 'exponential' is another option\r\np.plot(ma_type=ma_type, start_date=start_date, end_date=end_date)\r\n```\r\n\r\n### Makefile Help\r\nUse the command below to see the options available for Makefile\r\n```\r\n$ make help\r\n```\r\n\r\n### File Structure\r\n```\r\n├── docker-compose.yml\r\n├── fabfile.py\r\n├── Makefile\r\n├── Makefile.in\r\n├── monaco.ttf\r\n├── nginx.conf\r\n├── README.md\r\n├── requirements.txt\r\n├── setup.cfg\r\n├── src\r\n│   ├── data\r\n│   │   ├── admin.py\r\n│   │   ├── __init__.py\r\n│   │   ├── migrations\r\n│   │   │   └── __init__.py\r\n│   │   ├── models.py\r\n│   │   ├── tasks.py\r\n│   │   ├── tests.py\r\n│   │   ├── utils\r\n│   │   │   ├── exchanges.py\r\n│   │   │   ├── __init__.py\r\n│   │   │   ├── misc.py\r\n│   │   │   ├── plot.py\r\n│   │   │   ├── prices.py\r\n│   │   │   └── symbols.py\r\n│   │   └── views.py\r\n│   ├── db\r\n│   │   ├── celery.py\r\n│   │   ├── __init__.py\r\n│   │   ├── settings.py\r\n│   │   ├── urls.py\r\n│   │   └── wsgi.py\r\n│   ├── manage.py\r\n│   └── systems\r\n│       ├── bitops.py\r\n│       ├── __init__.py\r\n│       ├── simulations.py\r\n│       ├── strategies.py\r\n│       └── tests\r\n│           ├── __init__.py\r\n│           └── test_bitops.py\r\n└── supervisord.conf\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}