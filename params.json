{"name":"Trading System","tagline":"Python Scripts for Developing an Equity Trading System","body":"# Kapp Consult - Trading System [![Build Status](https://travis-ci.com/peekwez/trading_system.svg?token=BnDQr5dc9iRq4pSqsjvc&branch=master)](https://travis-ci.com/peekwez/trading_system)\r\n\r\n## **System Dependencies (Ubuntu 14.04 LTS)**\r\nInstall the following system dependencies\r\n\r\n* [pip](https://pip.pypa.io/en/stable/installing/)\r\n* [virtualenv](https://virtualenv.readthedocs.org/en/latest/installation.html)\r\n* [virtualenvwrapper](http://virtualenvwrapper.readthedocs.org/en/latest/install.html)\r\n* [Node.js](https://nodejs.org/en/)\r\n* [docker](https://docs.docker.com/engine/installation/)\r\n* [docker-compose](https://docs.docker.com/compose/install/)\r\n\r\n## **Installation**\r\n\r\n### Clone Repository.\r\n```\r\n$ git clone git@github.com:<peekwez>/trading_system.git\r\n$ cd trading_system\r\n```\r\n\r\n### Install Application Dependencies\r\nCopy and paste the lines below to install the following dependencies\r\n```\r\n$ sudo apt-get install -y build-essential gfortran gcc libatlas-base-dev  curl git python-dev libpq-dev libssl-dev postgresql-client libxml2-dev libxsltl-dev libgraphviz-dev libopenblas-dev liblapack-dev\r\n$ sudo apt-get build-dep python-matplotlib\r\n$ pip install -r requirements.txt\r\n$ npm install -g redis-commander\r\n```\r\n\r\n## **Setup Instructions**\r\n\r\n### Initial Setup\r\n```\r\n$ make setup\r\n```\r\n\r\nthe command chains several commands to\r\n\r\n* start a `postgres` and `redis` docker containers using `postgres:9.4.1` and `redis:2.8` images respectively. `docker-compose` is used to start the services. `postgres'` port `5432/tcp` is linked to port `5431` on the local machine, while `redis'` port `6379/tcp` is linked to port `6378` on the local machine. `redis` is started to serve as a broker for `celery`\r\n\r\n* create a database called `securities_master` and a `Django` **admin** superuser for the application. The shell will prompt you to create the superuser login credentials\r\n\r\n* create a `logs` directory in `trading_system/src/` and log files for all the supervisor processes inside the `logs` directory\r\n\r\n### Supervisor Processes\r\n```\r\n$ make processes\r\n$ make status  # (Check if processes are up and running)\r\n```\r\nthe first command starts the following processes as a daemon\r\n\r\n* `celery worker` - a task queue for real-time processing\r\n* `celery beat` -  a task scheduler\r\n* `Django development server`  - the **admin** page is at [http://localhost:8000/admin](http://localhost:8000/admin)\r\n* `celery flower` - web client for monitoring `celery-worker`[http://localhost:8001](http://localhost:8001)\r\n* `ipython notebook` - for python scripting; modules are imported using the `Django Shell-Plus` kernel [http://localhost:8002](http://localhost:8002)\r\n* `redis-commander` web client for `redis` [http://localhost:8003](http://localhost:8003)\r\n\r\n\r\n### Populating Database\r\n\r\n* execute the following `celery` tasks using [`ipython notebook`](http://localhost:8002) with the `Django Shell-Plus` kernel\r\n\r\n  ```python\r\n  tasks.add_symbols.delay() # all symbols for S&P/TSX and S&P/TSXV Indices\r\n  tasks.add_historical_data_all.delay() # add historical data 10 year\r\n  ```\r\n\r\n### Updating Tickers Manually\r\n* add the ticker(s) information to the **Symbols table** using the [Admin Page](http://localhost:8000/admin)\r\n\r\n* update the historical prices for the added tickers by executing the following commands inside a cell in the [`ipython notebook`](http://localhost:8002) using the `Django Shell-Plus` kernel\r\n  ```python\r\n  tasks.add_historical_data_ticker.delay(tickers=['BBD.B','AME',...])\r\n  ```\r\n\r\n### Daily Prices\r\n* `tasks.update_daily_quotes` task is executed every __10 minutes__ between __9am-6pm__ during the weekdays using `celery-beat` as the scheduler and the `celery-worker` as the task queue.\r\n\r\n## **After System Restart/Reboot**\r\n`cd` into application directory and execute the following commands\r\n```\r\n$ make docker-services\r\n$ make processes\r\n```\r\n\r\n## **Miscellaneous**\r\n### Sample Python Script\r\nThe test script below uses the [`ipython notebook`](http://localhost:8002) launched to generate a simple moving average for companies whose latest __close value__ is greater or equal to __$0.5__ but less or equal to __$2.5__, and also with an average volume of __100000__ shares since listed on the __TSX__ exchange. The second part of the script performs a backward and forward test for a random (__coin flip__) trading strategy (__short__ = 1, __long__ = 0) using the tickers from the first part.\r\n\r\n```python\r\n    # -*- coding: utf-8 -*-\r\n\r\n# turn matplotlib inline and save figs as pdfs or svg\r\nget_ipython().magic(u\"matplotlib inline\")\r\nget_ipython().magic(u\"config InlineBackend.figure_format = 'svg'\")\r\n\r\n# get latest date in database\r\nlatest_price = DailyPrice.objects.latest('price_date')\r\nlatest_date  = latest_price.price_date.strftime('%Y-%m-%d')\r\n\r\n# define constraints\r\nlower = 0.5\r\nupper = 2.5\r\nvolume = 100000\r\nexchange = 'TSX'\r\n\r\n# fetch tickers with daily bars\r\ntickers = DailyPrice.objects.annotate(\r\n    average_volume=Avg('volume')\r\n).filter(\r\n    close_price__lte=upper,\r\n    close_price__gte=lower,\r\n    average_volume__gte=volume,\r\n    symbol__exchange__abbrev=exchange,\r\n    price_date=latest_date\r\n).order_by(\r\n    'close_price'\r\n).values_list(\r\n    'symbol__ticker',\r\n    flat=True\r\n)\r\n\r\n\r\n# Plot Close Price and Moving Averages for Specific Tickers\r\n\r\n# plot constraints\r\nstart_date = '2015-01-01'\r\nend_date = latest_date\r\nma_type = 'exponential' # options='simple' or 'exponential'\r\n\r\n# get number of plots\r\nend = min(len(tickers),20)\r\n\r\n# initialize plot class and plot tickers\r\nf = plots.PlotSymbol(tickers[:end])\r\nf.plot(ma_type=ma_type, start_date=start_date, end_date=end_date)\r\n\r\n\r\n# Trading Strategy Simulations\r\n\r\n# initialize simulations for tickers\r\ng = []\r\n\r\n# get number of plots\r\nend = min(len(tickers),3)\r\n\r\n# initialize strategy class\r\nstrategy = strategies.RandomStrategy()\r\n\r\n# start simulation\r\nfor k,ticker in enumerate(tickers[:end]):\r\n\r\n    # initialize the basic random generator\r\n    seed()\r\n\r\n    # initialize simulation class and test strategy\r\n    g.append(simulations.MonteCarlo(strategy,ticker))\r\n    g[k].run_strategy()\r\n```\r\n\r\n### Makefile Help\r\nUse the command below to see the options available for Makefile\r\n```\r\n$ make help\r\n```\r\n\r\n### File Structure\r\n```\r\n├── docker-compose.yml\r\n├── fabfile.py\r\n├── Makefile\r\n├── Makefile.in\r\n├── monaco.ttf\r\n├── nginx.conf\r\n├── README.md\r\n├── requirements.txt\r\n├── setup.cfg\r\n├── src\r\n│   ├── data\r\n│   │   ├── admin.py\r\n│   │   ├── assets\r\n│   │   │   ├── __init__.py\r\n│   │   │   ├── other.csv\r\n│   │   │   ├── sec.csv\r\n│   │   │   ├── tsx.csv\r\n│   │   │   └── tsxv.csv\r\n│   │   ├── constants.py\r\n│   │   ├── __init__.py\r\n│   │   ├── migrations\r\n│   │   │   └── __init__.py\r\n│   │   ├── misc.py\r\n│   │   ├── models.py\r\n│   │   ├── plots.py\r\n│   │   ├── tasks.py\r\n│   │   ├── tests.py\r\n│   │   ├── utils.py\r\n│   │   └── views.py\r\n│   ├── db\r\n│   │   ├── celery.py\r\n│   │   ├── __init__.py\r\n│   │   ├── settings.py\r\n│   │   ├── urls.py\r\n│   │   └── wsgi.py\r\n│   ├── manage.py\r\n│   └── systems\r\n│       ├── bitops.py\r\n│       ├── __init__.py\r\n│       ├── simulations.py\r\n│       ├── strategies.py\r\n│       └── tests\r\n│           ├── __init__.py\r\n│           └── test_bitops.py\r\n└── supervisord.conf\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}